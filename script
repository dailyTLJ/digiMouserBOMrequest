
const MOUSER_API_KEY = "***************************************";
const MOUSER_KEYWORD_SEARCH_UL = `https://api.mouser.com/api/v1/search/keyword?apiKey=${MOUSER_API_KEY}`;

const DIGIKEY_CLIENT_ID = '***************************************';
const DIGIKEY_CLIENT_SECRET = '***************';
const DIGIKEY_AUTH_URL_V4 = 'https://api.digikey.com/v1/oauth2/authorize';
const DIGIKEY_TOKEN_URL_V4 = 'https://api.digikey.com/v1/oauth2/token';
const DIGIKEY_PRODUCT_SEARCH_URL_V4 = 'https://api.digikey.com/products/v4/search/keyword';


var mouserCol = 2;
var digikeyCol = 6;
var checkboxCol = 11;


function onOpen() {
  var ui = SpreadsheetApp.getUi();
  ui.createMenu('Custom Menu')
      .addItem('updateAll', 'updateAll')
      .addToUi();
}


function test() {
  updateRow(7);
}


function updateAll() {

  var sheet = SpreadsheetApp.getActiveSheet();
  var rows = sheet.getDataRange().getValues();

  rows.forEach(function(row, index) {
    if (index < 2) return;
    const partNumber = row[0];
    if (!partNumber) return;

    const partInfo = callMouserAPI(partNumber);

    if(partInfo) {

      // Extract relevant fields
      const availability = partInfo.Availability || 'N/A';
      const dataSheetUrl = partInfo.DataSheetUrl || 'N/A';
      const imagePath = partInfo.ImagePath || 'N/A';
      const priceForQty1 = partInfo.PriceBreaks?.find(pb => pb.Quantity === 1)?.Price || 'N/A';
      const availabilityInStock = partInfo.AvailabilityInStock || 'N/A';
      const factoryStock = partInfo.FactoryStock || 'N/A';
      const leadTime = partInfo.LeadTime || 'N/A';
      const productDetailUrl = partInfo.ProductDetailUrl || 'N/A';
      
      // Write the data into columns B-G
      sheet.getRange(index + 1, mouserCol, 1, 4).setValues([[
        priceForQty1, availabilityInStock, leadTime, `=hyperlink("${productDetailUrl}","mouser.ca")`
      ]]);

    }

    const partDigikey = callDigikeyAPI(partNumber);

    if(partDigikey) {

      const quantityAvailable = partDigikey.QuantityAvailable || 0.0;
      const manufacturerLeadWeeks = `${partDigikey.ManufacturerLeadWeeks} weeks` || "N/A";
      const unitPrice = partDigikey.ProductVariations?.[0]?.StandardPricing?.[0]?.UnitPrice || "N/A";
      const productUrl = partDigikey.ProductUrl || "N/A";

      sheet.getRange(index + 1, digikeyCol, 1, 4).setValues([[
        unitPrice, quantityAvailable, manufacturerLeadWeeks, `=hyperlink("${productUrl}","digikey.ca")`
      ]]);

    }

  });

  var currentDate = new Date();
  var formattedDate = Utilities.formatDate(currentDate, Session.getScriptTimeZone(), "yyyy/MM/dd HH:mm");
  sheet.getRange(1, 1).setValue("last updated: "+formattedDate);
  
}




function updateRow(rowID) {
  // get all product numbers
  var sheet = SpreadsheetApp.getActiveSheet();
  var rows = sheet.getDataRange().getValues();

  sheet.getRange(rowID,checkboxCol+1).setValue(`updating`);

  // const partNumbers = sheet.getRange(2, 1, sheet.getLastRow() - 1, 1).getValues().flat();


  const partNumber = rows[rowID-1][0];
  sheet.getRange(rowID,checkboxCol+1).setValue(partNumber);
  if (!partNumber) return;

  
  const partInfo = callMouserAPI(partNumber);
  
  if(partInfo) {
    // sheet.getRange(rowID,checkboxCol+1).setValue(`add Mouser`);

    // Extract relevant fields
    const availability = partInfo.Availability || 'N/A';
    const dataSheetUrl = partInfo.DataSheetUrl || 'N/A';
    const imagePath = partInfo.ImagePath || 'N/A';
    const priceForQty1 = partInfo.PriceBreaks?.find(pb => pb.Quantity === 1)?.Price || 'N/A';
    const availabilityInStock = partInfo.AvailabilityInStock || 'N/A';
    const factoryStock = partInfo.FactoryStock || 'N/A';
    const leadTime = partInfo.LeadTime || 'N/A';
    const productDetailUrl = partInfo.ProductDetailUrl || 'N/A';
    
    // Write the data into columns B-G
    sheet.getRange(rowID, mouserCol, 1, 4).setValues([[
      priceForQty1, availabilityInStock, leadTime, `=hyperlink("${productDetailUrl}","mouser.ca")`
    ]]);

    return;

  }

  const partDigikey = callDigikeyAPI(partNumber);

  if(partDigikey) {

    // sheet.getRange(rowID,checkboxCol+1).setValue(`add Digikey`);

    const quantityAvailable = partDigikey.QuantityAvailable || 0.0;
    const manufacturerLeadWeeks = `${partDigikey.ManufacturerLeadWeeks} weeks` || "N/A";
    const unitPrice = partDigikey.ProductVariations?.[0]?.StandardPricing?.[0]?.UnitPrice || "N/A";
    const productUrl = partDigikey.ProductUrl || "N/A";

    sheet.getRange(rowID, digikeyCol, 1, 4).setValues([[
      unitPrice, quantityAvailable, manufacturerLeadWeeks, `=hyperlink("${productUrl}","digikey.ca")`
    ]]);

  }


  
}




function log(line) {
  var sheet = SpreadsheetApp.getActiveSheet();
  Logger.log(line);
  sheet.getRange(1,checkboxCol).setValue(line);
}




function callMouserAPI(partNumber) {

  log(`Mouser API request for part ${partNumber}`);

  // Prepare the POST request payload
  const payload = {
    SearchByKeywordRequest: {
      keyword: partNumber,
      records: 1,
      startingRecord: 0,
      searchOptions: "",
      searchWithYourSignUpLanguage: ""
    }
  };

  const options = {
    method: 'post',
    contentType: 'application/json',
    payload: JSON.stringify(payload)
  };
  
  try {
    // Fetch data from the Mouser API
    const response = UrlFetchApp.fetch(MOUSER_KEYWORD_SEARCH_UL, options);
    const jsonResponse = JSON.parse(response.getContentText());
    return jsonResponse?.SearchResults?.Parts?.[0] || null;

  } catch (error) {
    log(`Error fetching data for ${partNumber}: ${error.message}`);
  }

}






function callDigikeyAPI(partNumber) {

  log(`Digikey API request for part ${partNumber}`);

  if (!DIGIKEY_CLIENT_ID || !DIGIKEY_CLIENT_SECRET) {
    log("Missing Digi-Key client ID or secret.");
    return;
  }

  // Step 1: Get the OAuth token
  const oauthToken = getOAuthToken();
  if (!oauthToken) {
    log("Failed to retrieve OAuth token.");
    return;
  }
  
  try {
    const searchResult = productSearch(oauthToken,partNumber);
    const jsonResponse = JSON.parse(searchResult.getContentText());

    const products = jsonResponse.ExactMatches;
    const product = products[0]; // Extract the first product
    log(`return product ${partNumber}`);
    return product;

  } catch (error) {
    log(`Error fetching data for ${partNumber}: ${error.message}`);
  }



}

//Get OAuth 2.0 access token for Digi-Key API.
function getOAuthToken() {
  const options = {
    method: 'post',
    payload: {
      client_id: DIGIKEY_CLIENT_ID,
      client_secret: DIGIKEY_CLIENT_SECRET,
      grant_type: 'client_credentials'
    }
  };

  const response = UrlFetchApp.fetch(DIGIKEY_TOKEN_URL_V4, options);
  const responseData = JSON.parse(response.getContentText());
  
  return responseData.access_token ? responseData : null;
}



// Perform a product search using the Digi-Key API.
function productSearch(token, keyword) {

  const payload = {
    Keywords: keyword
  };

  const options = {
    method: 'post',
    contentType: 'application/json',
    headers: {
      "X-DIGIKEY-Client-Id": DIGIKEY_CLIENT_ID,
      "X-DIGIKEY-Locale-Language": "en",
      "X-DIGIKEY-Locale-Currency": "CAD",
      "X-DIGIKEY-Locale-Site": "CA",
      "Authorization": "Bearer " + token.access_token
    },
    payload: JSON.stringify(payload)
  };

  const response = UrlFetchApp.fetch(DIGIKEY_PRODUCT_SEARCH_URL_V4, options);
  return response;
}




function onEdit(e) {

  var sheet = SpreadsheetApp.getActiveSheet();
  var rows = sheet.getDataRange().getValues();

  rows.forEach(function(row, index) {
    if (index < 2) return;
    const checkBox = row[checkboxCol-1];
    // Logger.log("checkbox "+index+ " : "+checkBox);
    if(checkBox === true) {
      // Logger.log("checkbox is true "+index);
      sheet.getRange(index+1,checkboxCol+1).setValue(`updateRow ${index+1}`);
      updateRow(index+1);
      log('done');
      sheet.getRange(index+1,checkboxCol+1).setValue('Done.');
      sheet.getRange(index+1,checkboxCol).setValue(false);;
    }

  });

  
}
